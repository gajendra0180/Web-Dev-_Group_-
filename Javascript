
JS:
Typeof
Null -> object
Undefined -> undefined



Comparing two JavaScript objects always returns false.


substr -> (start,length)
substring -> (start,end)
slice -> (start,end)


In javascript:
All string methods return a new string. They don't modify the original string.

Formally said:

Strings are immutable: Strings cannot be changed, only replaced.



#Property Access
ECMAScript 5 (2009) allows property access [ ] on strings:
Property access might be a little unpredictable:

It makes strings look like arrays (but they are not)
If no character is found, [ ] returns undefined, while charAt() returns an empty string.
It is read only. str[0] = "A" gives no error (but does not work!)



# The two methods, indexOf() and search(), are equal?

They accept the same arguments (parameters), and return the same value?

The two methods are NOT equal. These are the differences:

The search() method cannot take a second start position argument.
The indexOf() method cannot take powerful search values (regular expressions).




#In JS
String+number or number+string or string+string always yields concatenation
String(any other operator)number or number(any other operator)string or string(any other operator)string always yields mathematical evaluation

Note :
let x = 10;
let y = 20;
let z = "The result is: " + x + y;

output will be The result is: 1020   because (string+number+number) is taking place 



# But numbers can also be defined as objects with the keyword new:
let y = new Number(123);


//Converting a number to any base in JS
console.log(2+3).toString(2)




Execution Context : environment in which our JS code is executed and evaluated. 
Global Execution Context : Default execution context
Execution stack : Also known as call stack where all our execution contexts are stacked
Hoisting : JS mechanism where variable and function declarations are moved to the top of their scope before code execution.
Execution Phases: 1)Creation Phase ->a) variables created b)scope chains created c)'this'variable  
  2)Execution Phase ->runs current execution context line by line
  
 Functions are also called as first class citizens in JS because functions in JS can be treated like variables
 
 CallBack Function : The function that we pass as an argument to another function is called a callBack function.

